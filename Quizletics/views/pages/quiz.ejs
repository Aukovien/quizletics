<%- include ('../partials/header') %>
<%- include ('../partials/menu') %>
<%- include ('../partials/message', {message: locals.message, error: locals.error}) %>

<style>


  .answer{
    display: flex;
    justify-content: center;
    align-items: stretch;
  }
  .question{
    max-width: 40vw;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  #start-quiz-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: absolute;
    transition: opacity 1s;
  } 
.timer-score {
  display: flex;
  justify-content: space-between;
  width: 50%;
  margin-bottom: 20px;
  }

  #go-back-btn{
    align-self: stretch;
    background-color: #050505;
    border: none;
    color: #f5f5f5;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
    border-radius: 4px;
    transition-duration: 0.4s;
    padding: 1rem;
  }
  #goBackButton:hover {
    background-color: #3d3d3d;
    color: white;
  }

  h3 {
    color: #f5f5f5;
    margin-bottom: 2rem;
  }

  .answer {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: stretch;
    padding: 1rem 0 1rem 0;
  }

  .answer-btn {
    padding: 1rem;
    border: 2px solid #ccc;
    cursor: pointer;
    border-radius: 2rem;
    font-size: 1.5rem;
  }

  .answer-btn:hover {
    border-color: #999;
  }

  .answer-msg {
    text-align: center;
    display: inline;
    padding-left: 10px;
    font-weight: bold;
    font-size: 14px;
  }

  .answer-msg.correct {
    color: green;
  }

  .answer-msg.incorrect {
    color: red;
  }

  #quiz-container {
    padding: 50px;
    font-size: 28px;
    opacity: 1;
    transition: opacity 0.5s ease;
  }

  #quiz-container.fade-out {
    opacity: 0;
  }

  .timer,
  .score {
    font-size: 1.5em;
  }

#start-quiz-btn {
    font-size: 3em;
    padding: 3rem 6rem;
    cursor: pointer;
    background-color: #f5f5f5;
    color: #050505;
    border: none;
    border-radius: 5px;
}

</style>

<main>
  <div id="start-quiz-container" style="display: flex; justify-content: center; align-items: center;">
    <button id="start-quiz-btn" type="button">Start Quiz</button>
    <button id="go-back-btn">Go Back</button>
  </div>
  <form id="quiz-form">
    <div>
      <div id="quiz-container">
      </div>
    </div>
  </form>
</main>


  <script>
    const apiData = <%- JSON.stringify(locals.data) %>;
    let currentQuestionIndex = 0;
    let score = 0;

    document.getElementById('start-quiz-btn').addEventListener('click', () => {
      document.getElementById('start-quiz-container').style.display = 'none';
      document.getElementById('quiz-container').style.display = 'block';
      displayQuestion(apiData, currentQuestionIndex);
    });

    document.getElementById('go-back-btn').addEventListener('click', () => {
      window.location.href = '/';
    });

    let isAnswerBlocked = false;

    function blockAnswers() {
      isAnswerBlocked = true;
      const answerButtons = document.querySelectorAll('.answer-btn');
      answerButtons.forEach((btn) => {
        btn.disabled = true;
      });
    }

    function unblockAnswers() {
      isAnswerBlocked = false;
      const answerButtons = document.querySelectorAll('.answer-btn');
      answerButtons.forEach((btn) => {
        btn.disabled = false;
      });
    }
    function displayQuestion(questions, index) {
      const quizContainer = document.getElementById('quiz-container');
      quizContainer.classList.remove('fade-out');
      quizContainer.innerHTML = '';
  
      const questionObj = questions[index];
      const questionDiv = document.createElement('div');
      questionDiv.classList.add('question');
      questionDiv.innerHTML = `
        <h3>Question ${index + 1}: ${questionObj.question.text}</h3>
      `;
  
      const answers = [questionObj.correctAnswer, ...questionObj.incorrectAnswers].sort(() => Math.random() - 0.5);
  
      answers.forEach((answer, answerIndex) => {
        const answerDiv = document.createElement('div');
        answerDiv.classList.add('answer');
        answerDiv.innerHTML = `
          <button type="button" class="answer-btn" data-question="${index}" data-answer="${answer}">
            ${answer}
          </button>
        `;
        questionDiv.appendChild(answerDiv);
      });
  
      quizContainer.appendChild(questionDiv);
    }
  
    document.addEventListener('click', (event) => {
      if (event.target.matches('.answer-btn') && !isAnswerBlocked) {
        const button = event.target;
        const questionIndex = parseInt(button.dataset.question);
        const answer = button.dataset.answer;
        const answerDiv = button.parentElement;
        const answerMsg = document.createElement('span');
        answerMsg.classList.add('answer-msg');

        if (answer === apiData[questionIndex].correctAnswer) {
          score += 10;
          button.style.borderColor = 'green';
          answerMsg.innerText = 'Correct!';
          answerMsg.classList.add('correct');
          answerDiv.appendChild(answerMsg);
          // Disable all answer buttons for the current question
      const allAnswerButtons = document.querySelectorAll('.answer-btn[data-question="' + questionIndex + '"]');
      allAnswerButtons.forEach((btn) => {
        btn.disabled = true;
      });
      if (questionIndex + 1 < apiData.length) {
        setTimeout(() => {
          const quizContainer = document.getElementById('quiz-container');
          quizContainer.classList.add('fade-out'); // Add the fade-out class
          setTimeout(() => {
            currentQuestionIndex++;
            displayQuestion(apiData, currentQuestionIndex);
          }, 500); // Adjust the delay as needed
        }, 2000);
          } else {
            setTimeout(() => {
              alert('Congratulations! You have completed the quiz.');
            }, 2000);
          }
        } else {
          button.style.borderColor = 'red';
          button.disabled = true;
          answerMsg.innerText = 'Incorrect! Please wait...';
          answerMsg.classList.add('incorrect');
          answerDiv.appendChild(answerMsg);
    
          // Block answers and start the countdown
          const countdownDuration = 5; // Set the duration (in seconds) for the countdown
          let remainingTime = countdownDuration;
          blockAnswers();
          const countdownInterval = setInterval(() => {
            remainingTime--;
            answerMsg.innerText = `Incorrect! Wait ${remainingTime} seconds...`;
            if (remainingTime === 0) {
              clearInterval(countdownInterval);
              answerMsg.innerText = 'Incorrect! You can try again.';
              button.disabled = false;
              button.style.borderColor = '#ccc';
              unblockAnswers();
            }
          }, 1000);
        }
      }
    });
  </script>
  




